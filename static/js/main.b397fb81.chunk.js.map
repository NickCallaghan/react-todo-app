{"version":3,"sources":["componoents/AddToDo.js","componoents/FilterBar.js","componoents/ToDo.js","componoents/ToDoList.js","componoents/Stats.js","pages/Main.js","componoents/App.js","serviceWorker.js","index.js"],"names":["AddToDo","newTodoRef","React","createRef","handleAddToDo","event","preventDefault","current","value","newToDo","id","uuid","task","complete","props","addToDo","currentTarget","reset","className","onSubmit","this","ref","type","placeholder","Component","FilterBar","changeActiveFilter","e","list","childNodes","forEach","node","classList","contains","toggle","updatedFilter","updateFilter","all","open","completed","onClick","ToDo","handleToggleTodo","updatedTodo","todo","updateToDo","handleDeleteToDo","console","log","deleteToDo","key","checked","htmlFor","ToDoList","filterTodos","filter","todos","Object","keys","map","renderTodos","renderNoToDos","length","Stats","reduce","acc","remaining","Main","App","newTodo","setState","st","state","td","newFilter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b397fb81.chunk.js","sourcesContent":["import React from \"react\";\nimport uuid from \"uuid/v4\";\n\nclass AddToDo extends React.Component {\n  newTodoRef = React.createRef();\n\n  handleAddToDo = event => {\n    event.preventDefault();\n    // Add a todo if not empty\n    if (this.newTodoRef.current.value !== \"\") {\n      const newToDo = {\n        id: uuid(),\n        task: this.newTodoRef.current.value,\n        complete: false\n      };\n      this.props.addToDo(newToDo);\n      event.currentTarget.reset();\n    }\n  };\n\n  render() {\n    return (\n      <form className=\"add-todo\" onSubmit={this.handleAddToDo}>\n        <input\n          ref={this.newTodoRef}\n          type=\"text\"\n          placeholder=\"Add something to do\"\n        />{\" \"}\n        <button type=\"submit\">+</button>\n      </form>\n    );\n  }\n}\n\nexport default AddToDo;\n","import React from \"react\";\n\n\n\nclass FilterBar extends React.Component {\n  constructor(props){\n    super(props);  \n    this.list = React.createRef();\n    this.all = React.createRef();\n    this.open = React.createRef();\n    this.completed = React.createRef();\n  }\n  changeActiveFilter = e => {\n    // Get node list for filter options and untoggle active class\n    const listNodes = this.list.current.childNodes;\n    listNodes.forEach(node => {\n      if(node.classList.contains('active')){\n        node.classList.toggle('active')\n      }\n    })\n    //Get filter for clicked link and set state for clicked link\n    const updatedFilter = e.currentTarget.classList[0];\n    this.props.updateFilter(updatedFilter);\n    // Toggle active for the event target\n    e.currentTarget.classList.toggle('active');\n\n  }\n\n  render() {\n    return (\n      <ul className=\"filter-list\" ref={this.list}>\n        <li ref={this.all} className=\"all active\" onClick={this.changeActiveFilter}>All</li>\n        <li ref={this.open} className=\"open\" onClick={this.changeActiveFilter}>Open</li>\n        <li ref={this.completed} className=\"completed\" onClick={this.changeActiveFilter}>Completed</li>\n      </ul>\n      \n    );\n  }\n}\n\nexport default FilterBar;\n","import React from \"react\";\n\nclass ToDo extends React.Component {\n  handleToggleTodo = event => {\n    event.preventDefault();\n    const updatedTodo = this.props.todo;\n    const id = this.props.todo.id;\n    updatedTodo.complete = !updatedTodo.complete;\n    this.props.updateToDo(id, updatedTodo);\n  };\n\n  handleDeleteToDo = event => {\n    event.preventDefault();\n    const id = event.currentTarget.id;\n    const todo = event.currentTarget;\n    console.log(todo);\n    this.props.deleteToDo(id);\n  };\n\n  render() {\n    const { id, task, complete } = this.props.todo;\n    return (\n      <div className={`todo-item ${complete ? \"checked\" : \"not-checked\"}`}>\n        <input type=\"checkbox\" key={`${id}`} id={`${id}`} checked={complete} />\n        <label id={`${id}`} htmlFor={`${id}`} onClick={this.handleToggleTodo}>\n          {task}\n        </label>\n        <span\n          id={`${id}`}\n          className=\"remove-todo\"\n          onClick={this.handleDeleteToDo}\n        >\n          X\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport ToDo from \"./ToDo\";\n\nclass ToDoList extends React.Component {\n  filterTodos = filter => {\n    // Get todos\n    let todos = Object.keys(this.props.todos).map(key => {\n      return { ...this.props.todos[key] };\n    });\n    if (filter === \"completed\") {\n      todos = todos.filter(todo => todo.complete === true);\n    }\n    if (filter === \"open\") {\n      todos = todos.filter(todo => todo.complete === false);\n    }\n    return todos;\n  };\n\n  renderTodos = todos => {\n    return (\n      <div className=\"todo-list\">\n        {todos.map(todo => {\n          return (\n            <ToDo\n              key={todo.id}\n              todo={todo}\n              updateToDo={this.props.updateToDo}\n              deleteToDo={this.props.deleteToDo}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  renderNoToDos = () => {\n    return <div className=\"no-todos\">Nothing to do!</div>;\n  };\n\n  render() {\n    const todos = this.filterTodos(this.props.filter);\n    return todos.length ? this.renderTodos(todos) : this.renderNoToDos();\n  }\n}\nexport default ToDoList;\n","import React from \"react\";\n\nclass Stats extends React.Component {\n  render() {\n    //Calculated the number of completed ToDo items\n    const completed = Object.keys(this.props.todos).reduce((acc, key) => {\n      if (this.props.todos[key] && this.props.todos[key].complete === true) {\n        return (acc += 1);\n      }\n      return acc;\n    }, 0);\n    //Calculated the number of inComplete ToDo items\n    const remaining = Object.keys(this.props.todos).reduce((acc, key) => {\n      if (this.props.todos[key] && this.props.todos[key].complete === false) {\n        return (acc += 1);\n      }\n      return acc;\n    }, 0);\n\n    // Rendering the stats component\n    return (\n      <div className=\"stats\">\n        <div className=\"stats-completed card\">\n          <h3>Completed</h3>\n          <p>{completed}</p>\n        </div>\n        <div className=\"stats-remaining card\">\n          <h3>Remaining</h3>\n          <p>{remaining}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Stats;\n","import React from \"react\";\nimport AddToDo from \"../componoents/AddToDo\";\nimport FilterBar from \"../componoents/FilterBar\";\nimport ToDoList from \"../componoents/ToDoList\";\nimport Stats from \"../componoents/Stats\";\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div>\n        <AddToDo addToDo={this.props.addToDo} />\n\n        <FilterBar updateFilter={this.props.updateFilter} />\n\n        <ToDoList\n          filter={this.props.filter}\n          todos={this.props.todos}\n          updateToDo={this.props.updateToDo}\n          deleteToDo={this.props.deleteToDo}\n        />\n        <Stats todos={this.props.todos} />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"../pages/Main\";\nimport uuid from \"uuid/v4\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        {\n          id: uuid(),\n          task: \"Feed the cat\",\n          complete: false\n        },\n        {\n          id: uuid(),\n          task: \"Play with the cat\",\n          complete: false\n        },\n        {\n          id: uuid(),\n          task: \"Change Kittie Litter\",\n          complete: false\n        }\n      ],\n      filter: \"all\"\n    };\n  }\n\n  addToDo = newTodo => {\n    console.log(newTodo);\n    this.setState(st => ({ todos: [...st.todos, newTodo] }));\n  };\n\n  updateToDo = (id, updateToDo) => {\n    let todos = this.state.todos.map(td => {\n      if (td.id === id) {\n        return updateToDo;\n      }\n      return td;\n    });\n    this.setState({ todos });\n  };\n\n  deleteToDo = id => {\n    let todos = [...this.state.todos];\n    todos = todos.filter(td => td.id !== id);\n    this.setState({ todos });\n  };\n\n  updateFilter = newFilter => {\n    const updatedFilter = newFilter;\n    this.setState({ filter: updatedFilter });\n  };\n\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"main-heading\">Happy Cat To Do List</h1>\n        <p className=\"sub-heading\">Happy cats mean completed todos</p>\n        <Main\n          filter={this.state.filter}\n          todos={this.state.todos}\n          addToDo={this.addToDo}\n          updateToDo={this.updateToDo}\n          deleteToDo={this.deleteToDo}\n          updateFilter={this.updateFilter}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/style.scss\";\nimport App from \"./componoents/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}