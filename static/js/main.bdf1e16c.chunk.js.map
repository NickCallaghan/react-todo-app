{"version":3,"sources":["componoents/AddToDo.js","componoents/ToDo.js","componoents/ToDoList.js","componoents/Stats.js","componoents/FilterBar.js","componoents/App.js","serviceWorker.js","index.js"],"names":["AddToDo","newTodoRef","React","createRef","handleAddToDo","event","preventDefault","current","value","key","Date","now","newToDo","index","task","complete","props","updateToDo","currentTarget","reset","className","onSubmit","this","ref","type","placeholder","Component","ToDo","handleToggleTodo","id","updatedTodo","todo","handleDeleteToDo","deleteToDo","checked","htmlFor","onClick","ToDoList","filterTodos","filter","console","log","todos","Object","keys","map","Stats","completed","reduce","acc","remaining","FilterBar","changeActiveFilter","e","list","childNodes","forEach","node","classList","contains","toggle","updatedFilter","updateFilter","all","open","App","state","1","2","3","undefined","setState","newFilter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdf1e16c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass AddToDo extends React.Component {\r\n  newTodoRef = React.createRef();\r\n\r\n  handleAddToDo = event => {\r\n    event.preventDefault();\r\n    // Add a todo if not empty\r\n    if (this.newTodoRef.current.value !== \"\") {\r\n      const key = Date.now();\r\n      const newToDo = {\r\n        index: key,\r\n        key: key,\r\n        task: this.newTodoRef.current.value,\r\n        complete: false\r\n      };\r\n\r\n      this.props.updateToDo(key, newToDo);\r\n      event.currentTarget.reset();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"add-todo\" onSubmit={this.handleAddToDo}>\r\n        <input\r\n          ref={this.newTodoRef}\r\n          type=\"text\"\r\n          placeholder=\"Add something to do\"\r\n        />{\" \"}\r\n        <button type=\"submit\">+</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddToDo;\r\n","import React from \"react\";\r\n\r\nclass ToDo extends React.Component {\r\n  handleToggleTodo = event => {\r\n    event.preventDefault();\r\n    const key = event.currentTarget.id;\r\n    let updatedTodo = {\r\n      ...this.props.todo\r\n    };\r\n    updatedTodo.complete = !updatedTodo.complete;\r\n    this.props.updateToDo(key, updatedTodo);\r\n  };\r\n\r\n  handleDeleteToDo = event => {\r\n    event.preventDefault();\r\n    const key = event.currentTarget.id;\r\n    this.props.deleteToDo(key);\r\n  };\r\n\r\n  render() {\r\n    const { index, task, complete, key } = this.props.todo;\r\n    return (\r\n      <div className={`todo-item ${complete ? \"checked\" : \"not-checked\"}`}>\r\n        <input\r\n          type=\"checkbox\"\r\n          key={`${key}`}\r\n          id={`${index}`}\r\n          checked={complete}\r\n        />\r\n        <label\r\n          id={`${index}`}\r\n          htmlFor={`${index}`}\r\n          onClick={this.handleToggleTodo}\r\n        >\r\n          {task}\r\n        </label>\r\n        {/* <span\r\n          id={`${index}`}\r\n          className=\"remove-todo\"\r\n          onClick={this.handleDeleteToDo}\r\n        >\r\n          X\r\n        </span> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nclass ToDoList extends React.Component {\r\n  \r\n  filterTodos = (filter) => {\r\n    console.log(filter);\r\n    // Get todos\r\n    let todos = Object.keys(this.props.todos).map(key =>{\r\n      return {...this.props.todos[key]};\r\n    });\r\n    if (filter === \"completed\"){\r\n      todos = todos.filter(todo => todo.complete === true);\r\n    }\r\n    if (filter === \"open\"){\r\n      todos = todos.filter(todo => todo.complete === false);\r\n    }\r\n    return todos;\r\n  }\r\n  \r\n  render() {\r\n    const todos = this.filterTodos(this.props.filter);\r\n    return (\r\n      <div className=\"todo-list\">\r\n        {todos.map(todo => {\r\n            return (\r\n              <ToDo\r\n                key={todo.index}\r\n                todo={todo}\r\n                updateToDo={this.props.updateToDo}\r\n                deleteToDo={this.props.deleteToDo}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ToDoList;\r\n","import React from \"react\";\r\n\r\nclass Stats extends React.Component {\r\n  render() {\r\n    //Calculated the number of completed ToDo items\r\n    const completed = Object.keys(this.props.todos).reduce((acc, key) => {\r\n      if (this.props.todos[key] && this.props.todos[key].complete === true) {\r\n        return (acc += 1);\r\n      }\r\n      return acc;\r\n    }, 0);\r\n    //Calculated the number of inComplete ToDo items\r\n    const remaining = Object.keys(this.props.todos).reduce((acc, key) => {\r\n      if (this.props.todos[key] && this.props.todos[key].complete === false) {\r\n        return (acc += 1);\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    // Rendering the stats component\r\n    return (\r\n      <div className=\"stats\">\r\n        <div className=\"stats-completed card\">\r\n          <h3>Completed</h3>\r\n          <p>{completed}</p>\r\n        </div>\r\n        <div className=\"stats-remaining card\">\r\n          <h3>Remaining</h3>\r\n          <p>{remaining}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stats;\r\n","import React from \"react\";\r\n\r\n\r\n\r\nclass FilterBar extends React.Component {\r\n  constructor(props){\r\n    super(props);  \r\n    this.list = React.createRef();\r\n    this.all = React.createRef();\r\n    this.open = React.createRef();\r\n    this.completed = React.createRef();\r\n  }\r\n  changeActiveFilter = e => {\r\n    // Get node list for filter options and untoggle active class\r\n    const listNodes = this.list.current.childNodes;\r\n    listNodes.forEach(node => {\r\n      if(node.classList.contains('active')){\r\n        node.classList.toggle('active')\r\n      }\r\n    })\r\n    //Get filter for clicked link and set state for clicked link\r\n    const updatedFilter = e.currentTarget.classList[0];\r\n    this.props.updateFilter(updatedFilter);\r\n    // Toggle active for the event target\r\n    e.currentTarget.classList.toggle('active');\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"filter-list\" ref={this.list}>\r\n        <li ref={this.all} className=\"all active\" onClick={this.changeActiveFilter}>All</li>\r\n        <li ref={this.open} className=\"open\" onClick={this.changeActiveFilter}>Open</li>\r\n        <li ref={this.completed} className=\"completed\" onClick={this.changeActiveFilter}>Completed</li>\r\n      </ul>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterBar;\r\n","import React from \"react\";\r\nimport AddToDo from \"./AddToDo\";\r\nimport ToDoList from \"./ToDoList\";\r\nimport Stats from \"./Stats\";\r\nimport FilterBar from \"./FilterBar\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: {\r\n      1: {\r\n        index: 1,\r\n        key: 1,\r\n        task: \"Feed the cat\",\r\n        complete: true\r\n      },\r\n      2: {\r\n        index: 2,\r\n        key: 2,\r\n        task: \"Walk the cat\",\r\n        complete: false\r\n      },\r\n      3: {\r\n        index: 3,\r\n        key: 3,\r\n        task: \"Play with the cat\",\r\n        complete: false\r\n      }\r\n    },\r\n    filter: \"all\"\r\n  };\r\n\r\n  updateToDo = (key, updateToDo) => {\r\n    let todos = { ...this.state.todos };\r\n    todos[key] = updateToDo || undefined;\r\n    this.setState({ todos });\r\n  };\r\n\r\n  deleteToDo = key => {\r\n    let todos = { ...this.state.todos };\r\n    todos[key] = null;\r\n    this.setState({ todos });\r\n  };\r\n  updateFilter = newFilter => {\r\n    let updatedFilter = this.state.filter;\r\n    updatedFilter = newFilter;\r\n    this.setState({ filter: updatedFilter });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todo-container\">\r\n        <h1 className=\"main-heading\">Happy Cat To Do List</h1>\r\n        <p className=\"sub-heading\">Happy cats mean completed todos</p>\r\n\r\n        <AddToDo updateToDo={this.updateToDo} />\r\n\r\n        <FilterBar updateFilter={this.updateFilter} />\r\n\r\n        <ToDoList\r\n          filter={this.state.filter}\r\n          todos={this.state.todos}\r\n          updateToDo={this.updateToDo}\r\n          deleteToDo={this.deleteToDo}\r\n        />\r\n        <Stats todos={this.state.todos} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./scss/style.scss\";\r\nimport App from \"./componoents/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}