{"version":3,"sources":["componoents/AddToDo.js","componoents/ToDo.js","componoents/ToDoList.js","componoents/Stats.js","componoents/FilterBar.js","componoents/App.js","serviceWorker.js","index.js"],"names":["AddToDo","newTodoRef","React","createRef","handleAddToDo","event","preventDefault","current","value","key","Date","now","newToDo","index","task","complete","props","updateToDo","currentTarget","reset","className","onSubmit","this","ref","type","placeholder","Component","ToDo","handleToggleTodo","id","updatedTodo","todo","handleDeleteToDo","deleteToDo","checked","htmlFor","onClick","ToDoList","filterTodos","filter","console","log","todos","Object","keys","map","Stats","completed","reduce","acc","remaining","FilterBar","changeActiveFilter","e","list","childNodes","forEach","node","classList","contains","toggle","updatedFilter","updateFilter","all","open","App","state","1","2","3","undefined","setState","newFilter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAoCeA,E,2MAjCbC,WAAaC,IAAMC,Y,EAEnBC,cAAgB,SAAAC,GAGd,GAFAA,EAAMC,iBAEgC,KAAlC,EAAKL,WAAWM,QAAQC,MAAa,CACvC,IAAMC,EAAMC,KAAKC,MACXC,EAAU,CACdC,MAAOJ,EACPA,IAAKA,EACLK,KAAM,EAAKb,WAAWM,QAAQC,MAC9BO,UAAU,GAGd,EAAKC,MAAMC,WAAWR,EAAKG,GAC3BP,EAAMa,cAAcC,U,wEAKpB,OACE,0BAAMC,UAAU,WAAWC,SAAUC,KAAKlB,eACxC,2BACEmB,IAAKD,KAAKrB,WACVuB,KAAK,OACLC,YAAY,wBACX,IACH,2BAAOD,KAAK,SAAShB,MAAM,W,GA5BbN,IAAMwB,W,kOC8CbC,E,2MA7CbC,iBAAmB,SAAAvB,GACjBA,EAAMC,iBACN,IAAMG,EAAMJ,EAAMa,cAAcW,GAC5BC,E,yVAAW,IACV,EAAKd,MAAMe,MAEhBD,EAAYf,UAAYe,EAAYf,SACpC,EAAKC,MAAMC,WAAWR,EAAKqB,I,EAG7BE,iBAAmB,SAAA3B,GACjBA,EAAMC,iBACN,IAAMG,EAAMJ,EAAMa,cAAcW,GAChC,EAAKb,MAAMiB,WAAWxB,I,wEAGd,IAAD,EACgCa,KAAKN,MAAMe,KAA1ClB,EADD,EACCA,MAAOC,EADR,EACQA,KAAMC,EADd,EACcA,SAAUN,EADxB,EACwBA,IAC/B,OACE,yBAAKW,UAAS,oBAAeL,EAAW,UAAY,gBAClD,2BACES,KAAK,WACLf,IAAG,UAAKA,GACRoB,GAAE,UAAKhB,GACPqB,QAASnB,IAEX,2BACEc,GAAE,UAAKhB,GACPsB,QAAO,UAAKtB,GACZuB,QAASd,KAAKM,kBAEbd,GAEH,0BACEe,GAAE,UAAKhB,GACPO,UAAU,cACVgB,QAASd,KAAKU,kBAHhB,U,GAlCW9B,IAAMwB,W,kOCqCVW,E,2MAlCbC,YAAc,SAACC,GACbC,QAAQC,IAAIF,GAEZ,IAAIG,EAAQC,OAAOC,KAAK,EAAK5B,MAAM0B,OAAOG,KAAI,SAAApC,GAC5C,O,yVAAO,IAAI,EAAKO,MAAM0B,MAAMjC,OAQ9B,MANe,cAAX8B,IACFG,EAAQA,EAAMH,QAAO,SAAAR,GAAI,OAAsB,IAAlBA,EAAKhB,aAErB,SAAXwB,IACFG,EAAQA,EAAMH,QAAO,SAAAR,GAAI,OAAsB,IAAlBA,EAAKhB,aAE7B2B,G,wEAGC,IAAD,OACDA,EAAQpB,KAAKgB,YAAYhB,KAAKN,MAAMuB,QAC1C,OACE,yBAAKnB,UAAU,aACZsB,EAAMG,KAAI,SAAAd,GACP,OACE,kBAAC,EAAD,CACEtB,IAAKsB,EAAKlB,MACVkB,KAAMA,EACNd,WAAY,EAAKD,MAAMC,WACvBgB,WAAY,EAAKjB,MAAMiB,qB,GA3BhB/B,IAAMwB,WCgCdoB,E,iLAhCH,IAAD,OAEDC,EAAYJ,OAAOC,KAAKtB,KAAKN,MAAM0B,OAAOM,QAAO,SAACC,EAAKxC,GAC3D,OAAI,EAAKO,MAAM0B,MAAMjC,KAA2C,IAAnC,EAAKO,MAAM0B,MAAMjC,GAAKM,SACzCkC,EAAO,EAEVA,IACN,GAEGC,EAAYP,OAAOC,KAAKtB,KAAKN,MAAM0B,OAAOM,QAAO,SAACC,EAAKxC,GAC3D,OAAI,EAAKO,MAAM0B,MAAMjC,KAA2C,IAAnC,EAAKO,MAAM0B,MAAMjC,GAAKM,SACzCkC,EAAO,EAEVA,IACN,GAGH,OACE,yBAAK7B,UAAU,SACb,yBAAKA,UAAU,wBACb,yCACA,2BAAI2B,IAEN,yBAAK3B,UAAU,wBACb,yCACA,2BAAI8B,S,GA1BMhD,IAAMwB,WCsCXyB,E,YAnCb,WAAYnC,GAAO,IAAD,8BAChB,4CAAMA,KAMRoC,mBAAqB,SAAAC,GAED,EAAKC,KAAK/C,QAAQgD,WAC1BC,SAAQ,SAAAC,GACbA,EAAKC,UAAUC,SAAS,WACzBF,EAAKC,UAAUE,OAAO,aAI1B,IAAMC,EAAgBR,EAAEnC,cAAcwC,UAAU,GAChD,EAAK1C,MAAM8C,aAAaD,GAExBR,EAAEnC,cAAcwC,UAAUE,OAAO,WAjBjC,EAAKN,KAAOpD,IAAMC,YAClB,EAAK4D,IAAM7D,IAAMC,YACjB,EAAK6D,KAAO9D,IAAMC,YAClB,EAAK4C,UAAY7C,IAAMC,YALP,E,sEAwBhB,OACE,wBAAIiB,UAAU,cAAcG,IAAKD,KAAKgC,MACpC,wBAAI/B,IAAKD,KAAKyC,IAAK3C,UAAU,aAAagB,QAASd,KAAK8B,oBAAxD,OACA,wBAAI7B,IAAKD,KAAK0C,KAAM5C,UAAU,OAAOgB,QAASd,KAAK8B,oBAAnD,QACA,wBAAI7B,IAAKD,KAAKyB,UAAW3B,UAAU,YAAYgB,QAASd,KAAK8B,oBAA7D,kB,GA7BgBlD,IAAMwB,W,6jBCmEfuC,E,2MAhEbC,MAAQ,CACNxB,MAAO,CACLyB,EAAG,CACDtD,MAAO,EACPJ,IAAK,EACLK,KAAM,eACNC,UAAU,GAEZqD,EAAG,CACDvD,MAAO,EACPJ,IAAK,EACLK,KAAM,eACNC,UAAU,GAEZsD,EAAG,CACDxD,MAAO,EACPJ,IAAK,EACLK,KAAM,oBACNC,UAAU,IAIdwB,OAAQ,O,EAGVtB,WAAa,SAACR,EAAKQ,GACjB,IAAIyB,EAAK,KAAQ,EAAKwB,MAAMxB,OAC5BA,EAAMjC,GAAOQ,QAAcqD,EAC3B,EAAKC,SAAS,CAAE7B,W,EAGlBT,WAAa,SAAAxB,GACX,IAAIiC,EAAK,KAAQ,EAAKwB,MAAMxB,OAC5BA,EAAMjC,GAAO,KACb,EAAK8D,SAAS,CAAE7B,W,EAElBoB,aAAe,SAACU,GACd,IAAIX,EAAgB,EAAKK,MAAM3B,OAC/BsB,EAAgBW,EAChB,EAAKD,SAAS,CAAChC,OAAQsB,K,wEAIvB,OACE,yBAAKzC,UAAU,kBACb,wBAAIA,UAAU,gBAAd,wBACA,uBAAGA,UAAU,eAAb,0CAEA,kBAAC,EAAD,CAASH,WAAYK,KAAKL,aAE1B,kBAAC,EAAD,CAAW6C,aAAcxC,KAAKwC,eAE9B,kBAAC,EAAD,CACEvB,OAAQjB,KAAK4C,MAAM3B,OACnBG,MAAOpB,KAAK4C,MAAMxB,MAClBzB,WAAYK,KAAKL,WACjBgB,WAAYX,KAAKW,aAEnB,kBAAC,EAAD,CAAOS,MAAOpB,KAAK4C,MAAMxB,a,GA3DfxC,IAAMwB,WCMJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3edf99c8.chunk.js","sourcesContent":["import React from \"react\";\n\nclass AddToDo extends React.Component {\n  newTodoRef = React.createRef();\n\n  handleAddToDo = event => {\n    event.preventDefault();\n    // Add a todo if not empty\n    if (this.newTodoRef.current.value !== \"\"){\n      const key = Date.now();\n      const newToDo = {\n        index: key,\n        key: key,\n        task: this.newTodoRef.current.value,\n        complete: false\n      };\n    \n    this.props.updateToDo(key, newToDo);\n    event.currentTarget.reset();\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"add-todo\" onSubmit={this.handleAddToDo}>\n        <input\n          ref={this.newTodoRef}\n          type=\"text\"\n          placeholder=\"Add something to do\"\n        />{\" \"}\n        <input type=\"submit\" value=\"+\" />\n      </form>\n    );\n  }\n}\n\nexport default AddToDo;\n","import React from \"react\";\n\nclass ToDo extends React.Component {\n  handleToggleTodo = event => {\n    event.preventDefault();\n    const key = event.currentTarget.id;\n    let updatedTodo = {\n      ...this.props.todo\n    };\n    updatedTodo.complete = !updatedTodo.complete;\n    this.props.updateToDo(key, updatedTodo);\n  };\n\n  handleDeleteToDo = event => {\n    event.preventDefault();\n    const key = event.currentTarget.id;\n    this.props.deleteToDo(key);\n  };\n\n  render() {\n    const { index, task, complete, key } = this.props.todo;\n    return (\n      <div className={`todo-item ${complete ? \"checked\" : \"not-checked\"}`}>\n        <input\n          type=\"checkbox\"\n          key={`${key}`}\n          id={`${index}`}\n          checked={complete}\n        />\n        <label\n          id={`${index}`}\n          htmlFor={`${index}`}\n          onClick={this.handleToggleTodo}\n        >\n          {task}\n        </label>\n        <span\n          id={`${index}`}\n          className=\"remove-todo\"\n          onClick={this.handleDeleteToDo}\n        >\n          X\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport ToDo from \"./ToDo\";\n\nclass ToDoList extends React.Component {\n  \n  filterTodos = (filter) => {\n    console.log(filter);\n    // Get todos\n    let todos = Object.keys(this.props.todos).map(key =>{\n      return {...this.props.todos[key]};\n    });\n    if (filter === \"completed\"){\n      todos = todos.filter(todo => todo.complete === true);\n    }\n    if (filter === \"open\"){\n      todos = todos.filter(todo => todo.complete === false);\n    }\n    return todos;\n  }\n  \n  render() {\n    const todos = this.filterTodos(this.props.filter);\n    return (\n      <div className=\"todo-list\">\n        {todos.map(todo => {\n            return (\n              <ToDo\n                key={todo.index}\n                todo={todo}\n                updateToDo={this.props.updateToDo}\n                deleteToDo={this.props.deleteToDo}\n              />\n            );\n          }\n        )}\n      </div>\n    );\n  }\n}\nexport default ToDoList;\n","import React from \"react\";\n\nclass Stats extends React.Component {\n  render() {\n    //Calculated the number of completed ToDo items\n    const completed = Object.keys(this.props.todos).reduce((acc, key) => {\n      if (this.props.todos[key] && this.props.todos[key].complete === true) {\n        return (acc += 1);\n      }\n      return acc;\n    }, 0);\n    //Calculated the number of inComplete ToDo items\n    const remaining = Object.keys(this.props.todos).reduce((acc, key) => {\n      if (this.props.todos[key] && this.props.todos[key].complete === false) {\n        return (acc += 1);\n      }\n      return acc;\n    }, 0);\n\n    // Rendering the stats component\n    return (\n      <div className=\"stats\">\n        <div className=\"stats-completed card\">\n          <h3>Completed</h3>\n          <p>{completed}</p>\n        </div>\n        <div className=\"stats-remaining card\">\n          <h3>Remaining</h3>\n          <p>{remaining}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Stats;\n","import React from \"react\";\n\n\n\nclass FilterBar extends React.Component {\n  constructor(props){\n    super(props);  \n    this.list = React.createRef();\n    this.all = React.createRef();\n    this.open = React.createRef();\n    this.completed = React.createRef();\n  }\n  changeActiveFilter = e => {\n    // Get node list for filter options and untoggle active class\n    const listNodes = this.list.current.childNodes;\n    listNodes.forEach(node => {\n      if(node.classList.contains('active')){\n        node.classList.toggle('active')\n      }\n    })\n    //Get filter for clicked link and set state for clicked link\n    const updatedFilter = e.currentTarget.classList[0];\n    this.props.updateFilter(updatedFilter);\n    // Toggle active for the event target\n    e.currentTarget.classList.toggle('active');\n\n  }\n\n  render() {\n    return (\n      <ul className=\"filter-list\" ref={this.list}>\n        <li ref={this.all} className=\"all active\" onClick={this.changeActiveFilter}>All</li>\n        <li ref={this.open} className=\"open\" onClick={this.changeActiveFilter}>Open</li>\n        <li ref={this.completed} className=\"completed\" onClick={this.changeActiveFilter}>Completed</li>\n      </ul>\n      \n    );\n  }\n}\n\nexport default FilterBar;\n","import React from \"react\";\nimport AddToDo from \"./AddToDo\";\nimport ToDoList from \"./ToDoList\";\nimport Stats from \"./Stats\";\nimport FilterBar from \"./FilterBar\";\n\nclass App extends React.Component {\n  state = {\n    todos: {\n      1: {\n        index: 1,\n        key: 1,\n        task: \"Feed the cat\",\n        complete: true\n      },\n      2: {\n        index: 2,\n        key: 2,\n        task: \"Walk the cat\",\n        complete: false\n      },\n      3: {\n        index: 3,\n        key: 3,\n        task: \"Play with the cat\",\n        complete: false\n      }\n      \n    },\n    filter: \"all\"\n  };\n\n  updateToDo = (key, updateToDo) => {\n    let todos = { ...this.state.todos };\n    todos[key] = updateToDo || undefined;\n    this.setState({ todos });\n  };\n\n  deleteToDo = key => {\n    let todos = { ...this.state.todos };\n    todos[key] = null;\n    this.setState({ todos });\n  };\n  updateFilter = (newFilter) => {\n    let updatedFilter = this.state.filter\n    updatedFilter = newFilter;\n    this.setState({filter: updatedFilter});\n  }\n\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"main-heading\">Happy Cat To Do List</h1>\n        <p className=\"sub-heading\">Complete a to do to make the cat smile</p>\n\n        <AddToDo updateToDo={this.updateToDo} />\n\n        <FilterBar updateFilter={this.updateFilter} />\n\n        <ToDoList \n          filter={this.state.filter}\n          todos={this.state.todos}\n          updateToDo={this.updateToDo}\n          deleteToDo={this.deleteToDo}\n        />\n        <Stats todos={this.state.todos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/style.scss\";\nimport App from \"./componoents/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}