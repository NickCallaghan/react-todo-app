{"version":3,"sources":["componoents/AddToDo.js","componoents/ToDo.js","componoents/ToDoList.js","componoents/App.js","serviceWorker.js","index.js"],"names":["AddToDo","className","type","placeholder","value","React","Component","ToDo","handleToggleTodo","event","preventDefault","key","currentTarget","id","updatedTodo","props","todo","complete","updateToDo","this","index","task","checked","htmlFor","onClick","ToDoList","Object","keys","todos","map","App","state","todo1","todo2","todo3","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAaeA,E,iLATX,OACE,0BAAMC,UAAU,YACd,2BAAOC,KAAK,OAAOC,YAAY,wBAAyB,IACxD,2BAAOD,KAAK,SAASE,MAAM,W,GALbC,IAAMC,W,kOCiCbC,E,2MAhCbC,iBAAmB,SAAAC,GACjBA,EAAMC,iBACN,IAAMC,EAAMF,EAAMG,cAAcC,GAC5BC,E,yVAAW,IACV,EAAKC,MAAMC,MAEhBF,EAAYG,UAAYH,EAAYG,SACpC,EAAKF,MAAMG,WAAWP,EAAKG,I,wEAGnB,IAAD,EACgCK,KAAKJ,MAAMC,KAA1CI,EADD,EACCA,MAAOC,EADR,EACQA,KAAMJ,EADd,EACcA,SAAUN,EADxB,EACwBA,IAC/B,OACE,yBAAKV,UAAS,oBAAegB,EAAW,UAAY,gBAClD,2BACEf,KAAK,WACLS,IAAKA,EACLE,GAAE,cAASO,GACXE,QAASL,IAEX,2BACEJ,GAAE,cAASO,GACXG,QAAO,cAASH,GAChBI,QAASL,KAAKX,kBAEba,Q,GA1BQhB,IAAMC,WCiBVmB,E,iLAfH,IAAD,OACP,OACE,yBAAKxB,UAAU,aACZyB,OAAOC,KAAKR,KAAKJ,MAAMa,OAAOC,KAAI,SAAAlB,GAAG,OACpC,kBAAC,EAAD,CACEA,IAAK,EAAKI,MAAMa,MAAMjB,GAAKS,MAC3BJ,KAAM,EAAKD,MAAMa,MAAMjB,GACvBO,WAAY,EAAKH,MAAMG,qB,GARZb,IAAMC,W,kOC6CdwB,E,2MA3CbC,MAAQ,CACNH,MAAO,CACLI,MAAO,CACLZ,MAAO,EACPT,IAAK,EACLU,KAAM,aACNJ,UAAU,GAEZgB,MAAO,CACLb,MAAO,EACPT,IAAK,EACLU,KAAM,gBACNJ,UAAU,GAEZiB,MAAO,CACLd,MAAO,EACPT,IAAK,EACLU,KAAM,eACNJ,UAAU,K,EAKhBC,WAAa,SAACP,EAAKO,GACjB,IAAIU,E,yVAAK,IAAQ,EAAKG,MAAMH,OAC5BA,EAAMjB,GAAOO,EACb,EAAKiB,SAAS,CAAEP,W,wEAIhB,OACE,yBAAK3B,UAAU,kBACb,wBAAIA,UAAU,gBAAd,wBACA,uBAAGA,UAAU,eAAb,0CAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAU2B,MAAOT,KAAKY,MAAMH,MAAOV,WAAYC,KAAKD,kB,GAtC1Cb,IAAMC,WCQJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f70ed1c9.chunk.js","sourcesContent":["import React from \"react\";\n\nclass AddToDo extends React.Component {\n  render() {\n    return (\n      <form className=\"add-todo\">\n        <input type=\"text\" placeholder=\"Add something to do\" />{\" \"}\n        <input type=\"submit\" value=\"+\" />\n      </form>\n    );\n  }\n}\n\nexport default AddToDo;\n","import React from \"react\";\n\nclass ToDo extends React.Component {\n  handleToggleTodo = event => {\n    event.preventDefault();\n    const key = event.currentTarget.id;\n    let updatedTodo = {\n      ...this.props.todo\n    };\n    updatedTodo.complete = !updatedTodo.complete;\n    this.props.updateToDo(key, updatedTodo);\n  };\n\n  render() {\n    const { index, task, complete, key } = this.props.todo;\n    return (\n      <div className={`todo-item ${complete ? \"checked\" : \"not-checked\"}`}>\n        <input\n          type=\"checkbox\"\n          key={key}\n          id={`todo${index}`}\n          checked={complete}\n        />\n        <label\n          id={`todo${index}`}\n          htmlFor={`todo${index}`}\n          onClick={this.handleToggleTodo}\n        >\n          {task}\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport ToDo from \"./ToDo\";\n\nclass ToDoList extends React.Component {\n  render() {\n    return (\n      <div className=\"todo-list\">\n        {Object.keys(this.props.todos).map(key => (\n          <ToDo\n            key={this.props.todos[key].index}\n            todo={this.props.todos[key]}\n            updateToDo={this.props.updateToDo}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React from \"react\";\nimport AddToDo from \"./AddToDo\";\nimport ToDoList from \"./ToDoList\";\n\nclass App extends React.Component {\n  state = {\n    todos: {\n      todo1: {\n        index: 1,\n        key: 1,\n        task: \"Feed Kitty\",\n        complete: true\n      },\n      todo2: {\n        index: 2,\n        key: 2,\n        task: \"Play with cat\",\n        complete: false\n      },\n      todo3: {\n        index: 3,\n        key: 3,\n        task: \"Walk the cat\",\n        complete: false\n      }\n    }\n  };\n\n  updateToDo = (key, updateToDo) => {\n    let todos = { ...this.state.todos };\n    todos[key] = updateToDo;\n    this.setState({ todos });\n  };\n\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <h1 className=\"main-heading\">Happy Cat To Do List</h1>\n        <p className=\"sub-heading\">Complete a to do to make the cat smile</p>\n\n        <AddToDo />\n\n        <ToDoList todos={this.state.todos} updateToDo={this.updateToDo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/style.scss\";\nimport App from \"./componoents/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}